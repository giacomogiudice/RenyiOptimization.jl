using RenyiOptimization
using OptimKit
using TensorKit
using JLD2
using ArgParse

include("auxiliary.jl")

function parse_commandline()
    s = ArgParseSettings()
    @add_arg_table! s begin
        "--lambdas", "-l"
            help = "parameters for lambda optimization"
            required = true
            arg_type = Float64
            nargs = '*'
        "--energy", "-e"
            help = "energy density for lambda optimization"
            required = true
            arg_type = Float64
        "--gamma", "-g"
            help = "interpolation parameter between XY and Ising model"
            arg_type = Float64
            default = 1.0
        "--hx"
            help = "parallel field"
            arg_type = Float64
            default = 0.0
        "--hz"
            help = "transverse field"
            arg_type = Float64
            default = 0.0
        "--Z2"
            help = "enforce ‚Ñ§‚ÇÇ symmetry"
            action = :store_true
        "--maxiter", "-n"
            help = "maximum number of iterations per bond dimensions"
            arg_type = Int
            default = 10000
        "--tol", "-t"
            help = "tolerance on gradient magnitude"
            arg_type = Float64
            default = 1e-6
        "--verbosity", "-v"
            help = "verbosity level of output"
            arg_type = Int
            default = 2
        "--bonddims", "-D"
            help = "bond dimensions for each simulation"
            arg_type = Int
            required = true
            nargs = '*'
        "--preconditioner"
            help = "use preconditioner"
            action = :store_true
        "--dir"
            help = "location of output file"
            arg_type = String
            required = true
    end

    parse_args(s; as_symbols = true)
end

function main()
    # Parse input parameters
    pars = parse_commandline()
    @debug "Parsed args: $pars"

    # User-defined parameters go here
    Œªs = pars[:lambdas]
    Œµ‚ÇÄ = pars[:energy]
    Œ≥ = pars[:gamma]
    hx = pars[:hx]
    hz = pars[:hz]
    group = pars[:Z2] ? ‚Ñ§‚ÇÇ : nothing
    maxiter = pars[:maxiter]
    tol = pars[:tol]
    verbosity = pars[:verbosity]
    Ds = pars[:bonddims]
    preconditioner = pars[:preconditioner]
    location = pars[:dir]
    
    @debug "Main routine started"

    # Hardcoded parameters go here
    type = Float64
    linesearch = HagerZhangLineSearch()
    alg = LBFGS(20; maxiter = maxiter, verbosity = verbosity, gradtol = tol, linesearch = linesearch)
    solvertol = 1e-12

    # The ol' Pauli matrices
    X, Y, Z = map(œÉ -> TensorMap(œÉ, ‚ÑÇ^2 ‚Üê ‚ÑÇ^2), ([0 1; 1 0], [0 -im; im 0], [1 0; 0 -1]))

    # Define the 2-site contribution to the XY model hamiltonian
    ùüô = one(Z)
    h = -(1+Œ≥)/2*(X ‚äó X) - (1-Œ≥)/2*real(Y ‚äó Y) - hz/2*(ùüô ‚äó Z + Z ‚äó ùüô) - hx/2*(ùüô ‚äó X + X ‚äó ùüô)

    D‚ÇÄ = first(Ds)
    if group == ‚Ñ§‚ÇÇ
        hx ‚âà 0 || @warn "field h‚Çì is not zero"
        indmap = [‚Ñ§‚ÇÇ(0),‚Ñ§‚ÇÇ(1)]
        Z = restrict(Z, indmap)
        X = zero(Z)
        Y = zero(Z)

        h = restrict(h, indmap)
        Dsect = Int(D‚ÇÄ/2)
        virt = ‚ÑÇ[‚Ñ§‚ÇÇ](0 => Dsect, 1 => Dsect)
    else
        virt = ‚ÑÇ^D‚ÇÄ
    end
    phys = space(Z, 1)

    # Loop over different bond dimensions
    for D in Ds
        for Œª in Œªs
            global output, A, œÅL, œÅR, gradhistory
            @info "Running D = $(D), Œª = $(Œª)..."
            if D == D‚ÇÄ
                A = TensorMap(randisometry, type, virt ‚äó phys ‚äó phys ‚Üê virt)
            else
                A = increasebond(A, h; Œª = Œª, Œµ‚ÇÄ = Œµ‚ÇÄ, trunc = truncdim(D - D‚ÇÄ)) 
            end
            # Run the optimization
            A, output, œÅL, œÅR, gradhistory = lambdaoptimize(Œª, Œµ‚ÇÄ, h, A, alg; tol = solvertol, preconditioner = preconditioner)
        end

        # Compute observables
        observables =
        (
            h = output.Œµ,
            X = expectationvalue(X, A, œÅL, œÅR),
            Z = expectationvalue(Z, A, œÅL, œÅR),
            XX = two_point_correlations(X, X, A, [1], œÅL, œÅR) |> first,
            ZZ = two_point_correlations(Z, Z, A, [1], œÅL, œÅR) |> first
        )
        
        # Save results
        filename = "$(location)/XY__Œ≥=$(Œ≥)_hx=$(hx)_hz=$(hz)_Œµ‚ÇÄ=$(Œµ‚ÇÄ)_group=$(group)_D=$(D).jld2"
        @save filename Œªs A œÅL œÅR observables type linesearch alg solvertol group D output gradhistory preconditioner
    end
    return Cint(0)
end

main()
